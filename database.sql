SELECT NAME
FROM sys.databases

CREATE DATABASE Resit;

--Dion Finnerty 103545669--

/*TASK 1

SUBJECT(SubjCode, Description)
PRIMARY  KEY (SubjCode)

TEACHER(StaffId, Surname, GivenName)
PRIMARY KEY (StaffId)

STUDENT(StudentId, Surname, GivenName, Gender)
PRIMARY KEY (StudentId)


SUBJECTOFFERING(Year, Semester, SubjCode, StaffId, Fee)
PRIMARY KEY (Year, Semester)
FOREIGN KEY (SubjCode) REFERENCES SUBJECT
FOREIGN KEY (StaffId) REFERENCES TEACHER

ENROLMENT(StudentId, SubjCode, Year, Semester, DateEnrolled, Grade)
FOREIGN KEY (Year, Semester) REFERENCES SUBJECTOFFERING
FOREIGN KEY (StudentId) REFERENCES STUDENT
FOREIGN KEY (SubjCode) REFERENCES SUBJECT


*/

CREATE TABLE SUBJECT5669 (
    SubjCode NVARCHAR(100), 
    [Description] NVARCHAR(500),
    PRIMARY  KEY (SubjCode)
)

CREATE TABLE TEACHER5669(
    StaffId INT, 
    Surname NVARCHAR(100) NOT NULL, 
    GivenName NVARCHAR(100) NOT NULL,
    PRIMARY KEY (StaffId),
    CONSTRAINT CHK_TEACHER_STAFFID CHECK (StaffId BETWEEN 10000000 AND 99999999)
)

CREATE TABLE STUDENT5669(
    StudentId NVARCHAR(10), 
    Surname NVARCHAR(100) NOT NULL, 
    GivenName NVARCHAR(100) NOT NULL, 
    Gender  NVARCHAR(1)
    PRIMARY KEY (StudentId)
    CONSTRAINT CHK_STUDENT_GENDER CHECK (Gender IN('M', 'F', 'I'))
)

CREATE TABLE SUBJECTOFFERING5669(
    [Year] INT , 
    Semester INT, 
    SubjCode NVARCHAR(100), 
    StaffId INT, 
    Fee MONEY NOT NULL,
    PRIMARY KEY (SubjCode, [Year], Semester),
    FOREIGN KEY (SubjCode) REFERENCES SUBJECT5669,
    FOREIGN KEY (StaffId) REFERENCES TEACHER5669,
    CONSTRAINT CHK_SUBJECTOFFERING_YEAR CHECK ([Year] BETWEEN 1000 AND 9999),
    CONSTRAINT CHK_SUBJECTOFFERING_SEMESTER CHECK (Semester IN (1,2)),
    CONSTRAINT CHK_SUBJECTOFFERING_FEE CHECK (Fee > 0)
)

CREATE TABLE ENROLMENT5669(
    StudentId NVARCHAR(10),
    [Year] INT, 
    SubjCode NVARCHAR(100),
    Semester INT, 
    DateEnrolled DATE, 
    Grade NVARCHAR(2) DEFAULT NULL,
    FOREIGN KEY (SubjCode, [Year], Semester) REFERENCES SUBJECTOFFERING5669,
    FOREIGN KEY (StudentId) REFERENCES STUDENT5669,
    FOREIGN KEY (SubjCode) REFERENCES SUBJECT5669,
    CONSTRAINT CHK_ENROLMENT_GRADE CHECK (Grade IN ('N', 'P', 'C', 'D', 'HD'))
)

INSERT INTO SUBJECT5669 (SubjCode, [Description]) VALUES 
('ICTPRG418',	'Apply SQL to extract & manipulate data'),
('ICTBSB430', 'Create Basic Databases'),
('ICTDBS205', 	'Design a Database');

INSERT INTO TEACHER5669 (StaffId, Surname, GivenName) VALUES
(98776655,  'Young',	'Angus'),
(87665544,	'Scott',	'Bon'),
(76554433,	'Slade',	'Chris');

INSERT INTO STUDENT5669 (StudentId, Surname, GivenName, Gender) VALUES
('s12233445',	'Baird',    'Tim',	'M'),
('s23344556',	'Nguyen',	'Anh',	'M'),
('s34455667',	'Hallinan',	'James',	'M');

INSERT INTO SUBJECTOFFERING5669 (SubjCode, [Year], Semester, Fee, StaffId) VALUES
('ICTPRG418',	2019,	1,	200,	98776655),
('ICTPRG418',	2020,	1,	225,	98776655),
('ICTBSB430',	2020,	1,	200,	87665544),
('ICTBSB430',	2020,	2,	200,	76554433),
('ICTDBS205',	2019,	2,	225,	87665544);

INSERT INTO ENROLMENT5669 (StudentId, SubjCode, [Year], Semester, Grade, DateEnrolled) VALUES
('s12233445',	'ICTPRG418',	2019,	1,	'D',	'2019-02-25'),
('s23344556',	'ICTPRG418',	2019,	1,	'P',	'2019-02-15'),
('s12233445',	'ICTPRG418',	2020,	1,	'C',	'2020-01-30'),
('s23344556',	'ICTPRG418',	2020,	1,	'HD',	'2020-02-26'),
('s34455667',	'ICTPRG418',	2020,	1,	'P',	'2020-01-28'),
('s12233445',	'ICTBSB430',	2020,	1,	'C',	'2020-02-08'),
('s23344556',	'ICTBSB430',    2020,	2,	NULL,	'2020-06-30'),
('s34455667',	'ICTBSB430',	2020,	2,	NULL,	'2020-07-03'),
('s23344556',	'ICTDBS205',	2019,	2,	'P',	'2019-07-01'),
('s34455667',	'ICTDBS205',	2019,	2,	'N',	'2019-07-13');



SELECT *
FROM STUDENT5669


--1.--
SELECT S.GivenName, S.Surname, SUB.SubjCode, SUB.[Description], SO.[Year], SO.Semester, SO.Fee, T.GivenName, T.Surname
FROM STUDENT5669 S
INNER JOIN ENROLMENT5669 E
ON S.StudentId = E.StudentId
INNER JOIN SUBJECTOFFERING5669 SO
ON SO.SubjCode = E.SubjCode
INNER JOIN SUBJECT5669 SUB
ON SUB.SubjCode = SO.SubjCode
INNER JOIN TEACHER5669 T 
ON T.StaffId = SO.StaffId
/*THE COUNT IN THE BELOW QUERY RETURNS THE 
SAME NUMBER OF ROWS VERIFYING IT RETURNS 
THE CORRECT AMOUNT OF DATA*/
SELECT COUNT(*)
FROM STUDENT5669 S
INNER JOIN ENROLMENT5669 E
ON S.StudentId = E.StudentId
INNER JOIN SUBJECTOFFERING5669 SO
ON SO.SubjCode = E.SubjCode
INNER JOIN SUBJECT5669 SUB
ON SUB.SubjCode = SO.SubjCode
INNER JOIN TEACHER5669 T 
ON T.StaffId = SO.StaffId


--2.--
SELECT [Year], Semester, COUNT(*) AS 'Num Enrollments'
FROM ENROLMENT5669
GROUP BY [YEAR], Semester
/* THE COUNT CORRECTLY DISPLAYS THE AMOUNT OF
ROWS THAT ARE AFFECTED, IF YOU COUNT THEM MANUALLY THE
RESULT IS CORRECT*/

SELECT COUNT(*)
FROM ENROLMENT5669
GROUP BY [Year], Semester


--3.--
SELECT E.*
FROM SUBJECTOFFERING5669 SO 
INNER JOIN ENROLMENT5669 E
ON E.Semester = SO.Semester 
INNER JOIN (
SELECT TOP 1 SubjCode
FROM SUBJECTOFFERING5669 ORDER BY Fee DESC) as H
on H.SubjCode = SO.SubjCode
/*THE FEE AMOUNT IS INCLUDED IN THE BOTTOM QUERY,
IT MAKES VISABLE THAT IN FACT ALL THE ROWS DISPLAYED
ARE THE HIGHEST FEE BEING '225' */
SELECT E.*, SO.Fee
FROM SUBJECTOFFERING5669 SO 
INNER JOIN ENROLMENT5669 E
ON E.Semester = SO.Semester 
INNER JOIN (
SELECT TOP 1 SubjCode
FROM SUBJECTOFFERING5669 ORDER BY Fee DESC) as H
on H.SubjCode = SO.SubjCode
/*THIS BOTTOM QUERY ALSO SHOWS THE REMAINING FEES THAT 
ARE NOT SHOWN PROVING THAT ONLY THE HIGHEST FEE
IS DISPLAYED IN THE FIRST QUERY*/
SELECT SO.Fee
FROM SUBJECTOFFERING5669 SO 
INNER JOIN ENROLMENT5669 E
ON E.Semester = SO.Semester 
INNER JOIN (
SELECT TOP 1 SubjCode
FROM SUBJECTOFFERING5669 ORDER BY Fee ASC) as H
on H.SubjCode = SO.SubjCode

--TASK5.--
CREATE VIEW DETAILS AS 
SELECT S.GivenName 'STUDENTNAME', S.Surname 'STUDENTSURNAME', SU.SubjCode, SU.[Description], SO.[Year], SO.Semester, SO.Fee, T.GivenName, T.Surname
FROM STUDENT5669 S
INNER JOIN ENROLMENT5669 E
ON S.StudentId = E.StudentId
INNER JOIN SUBJECTOFFERING5669 SO
ON SO.SubjCode = E.SubjCode
INNER JOIN TEACHER5669 T
ON T.StaffID = SO.StaffID
INNER JOIN SUBJECT5669 SU
ON SU.SubjCode = SO.SubjCode;

SELECT * 
FROM DETAILS 
WHERE STUDENTNAME = 'TIM'

SELECT COUNT(*)
FROM DETAILS 
WHERE STUDENTNAME ='TIM'
--



DROP TABLE SUBJECT5669

DROP TABLE TEACHER5669

DROP TABLE STUDENT5669

DROP TABLE SUBJECTOFFERING5669

DROP TABLE ENROLMENT5669

